# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import spec_pb2 as spec__pb2


class ClientAccountStub(object):
    """Define a gRPC service for client-server communication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAccount = channel.unary_unary(
                '/ClientAccount/CreateAccount',
                request_serializer=spec__pb2.CreateAccountRequest.SerializeToString,
                response_deserializer=spec__pb2.ServerResponse.FromString,
                )
        self.ListUsers = channel.unary_unary(
                '/ClientAccount/ListUsers',
                request_serializer=spec__pb2.Empty.SerializeToString,
                response_deserializer=spec__pb2.Users.FromString,
                )
        self.Login = channel.unary_unary(
                '/ClientAccount/Login',
                request_serializer=spec__pb2.LoginRequest.SerializeToString,
                response_deserializer=spec__pb2.ServerResponse.FromString,
                )
        self.Send = channel.unary_unary(
                '/ClientAccount/Send',
                request_serializer=spec__pb2.SendRequest.SerializeToString,
                response_deserializer=spec__pb2.ServerResponse.FromString,
                )
        self.ReceiveMessage = channel.unary_unary(
                '/ClientAccount/ReceiveMessage',
                request_serializer=spec__pb2.ReceiveRequest.SerializeToString,
                response_deserializer=spec__pb2.Messages.FromString,
                )
        self.DeleteAccount = channel.unary_unary(
                '/ClientAccount/DeleteAccount',
                request_serializer=spec__pb2.DeleteAccountRequest.SerializeToString,
                response_deserializer=spec__pb2.ServerResponse.FromString,
                )
        self.Logout = channel.unary_unary(
                '/ClientAccount/Logout',
                request_serializer=spec__pb2.DeleteAccountRequest.SerializeToString,
                response_deserializer=spec__pb2.ServerResponse.FromString,
                )


class ClientAccountServicer(object):
    """Define a gRPC service for client-server communication
    """

    def CreateAccount(self, request, context):
        """Define an RPC for creating an account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Define an RPC for listing all users in the database
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Define an RPC for logging in to an account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Send(self, request, context):
        """Define an RPC for sending a message to a recipient
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveMessage(self, request, context):
        """Define an RPC for receiving messages
        rpc SubscribeMessage(ReceiveRequest) returns (stream Message);

        Define an RPC for receiving messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Define an RPC for deleting an account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Define an RPC for logging out of an account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientAccountServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccount,
                    request_deserializer=spec__pb2.CreateAccountRequest.FromString,
                    response_serializer=spec__pb2.ServerResponse.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=spec__pb2.Empty.FromString,
                    response_serializer=spec__pb2.Users.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=spec__pb2.LoginRequest.FromString,
                    response_serializer=spec__pb2.ServerResponse.SerializeToString,
            ),
            'Send': grpc.unary_unary_rpc_method_handler(
                    servicer.Send,
                    request_deserializer=spec__pb2.SendRequest.FromString,
                    response_serializer=spec__pb2.ServerResponse.SerializeToString,
            ),
            'ReceiveMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveMessage,
                    request_deserializer=spec__pb2.ReceiveRequest.FromString,
                    response_serializer=spec__pb2.Messages.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=spec__pb2.DeleteAccountRequest.FromString,
                    response_serializer=spec__pb2.ServerResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=spec__pb2.DeleteAccountRequest.FromString,
                    response_serializer=spec__pb2.ServerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ClientAccount', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClientAccount(object):
    """Define a gRPC service for client-server communication
    """

    @staticmethod
    def CreateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClientAccount/CreateAccount',
            spec__pb2.CreateAccountRequest.SerializeToString,
            spec__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClientAccount/ListUsers',
            spec__pb2.Empty.SerializeToString,
            spec__pb2.Users.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClientAccount/Login',
            spec__pb2.LoginRequest.SerializeToString,
            spec__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClientAccount/Send',
            spec__pb2.SendRequest.SerializeToString,
            spec__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClientAccount/ReceiveMessage',
            spec__pb2.ReceiveRequest.SerializeToString,
            spec__pb2.Messages.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClientAccount/DeleteAccount',
            spec__pb2.DeleteAccountRequest.SerializeToString,
            spec__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClientAccount/Logout',
            spec__pb2.DeleteAccountRequest.SerializeToString,
            spec__pb2.ServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
